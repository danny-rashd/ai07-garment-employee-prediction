# -*- coding: utf-8 -*-
"""garment-employee-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JToFygoN6cJchFXqeKP3dFAFIL_Ug8z9
"""

# import packages
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.utils import plot_model
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, mean_absolute_error
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Load data
df = pd.read_csv('dataset/garments_worker_productivity.csv')

df.isna().sum()

df['wip'].fillna(int(df['wip'].mean()), inplace=True)
df.info()

df.describe(include=['O'])

print(df['quarter'].unique())
print(df['day'].unique())
print(df['department'].unique())

df['department'] = df['department'].apply(
    lambda x: 'finishing' if x == ('finishing' or 'finishing ') else 'sewing')
print(df['department'].unique())

# Create the label for classification class where 'actual_productivity' > 0.5 to 1 and 'actual_productivity' <= 0.5 to 0
df['actual_productivity_class'] = np.where(
    df['actual_productivity'] > 0.5, 1, 0)
df['actual_productivity_class'].value_counts()

labels_reg = df['actual_productivity']
labels_class = df['actual_productivity_class']
features = df.drop(['date', 'actual_productivity',
                   'actual_productivity_class'], axis=1)


# convert categorical variables to dummy variables
features = pd.get_dummies(features)

# Regression labels
print(labels_reg.head())

# Classification labels
print(labels_class.head())

# Features
print(features.head())

# Train test split
X_train, X_test, y_train, y_test, y_train_class, y_test_class = train_test_split(
    features, labels_reg, labels_class, test_size=0.2, random_state=12345)

# Feature Scaling
scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

#Create a functional API model
nIn = X_train.shape[1]
# nClass = output for classification model
nClass = len(np.unique(y_test_class))

inputs = keras.Input(shape=(nIn,))
h1 = layers.Dense(64, activation='relu')
h2 = layers.Dropout(0.3)
h3 = layers.Dense(64, activation='relu')
h4 = layers.Dropout(0.3)
h5 = layers.Dense(32, activation='relu')
h6 = layers.Dropout(0.1)
h7 = layers.Dense(32, activation='relu')
h8 = layers.Dropout(0.1)

out_reg = layers.Dense(1, activation='linear')
out_class = layers.Dense(nClass, activation='softmax')

# Chain layers with functional API
x = h1(inputs)
x = h2(x)
x = h3(x)
x = h4(x)
x = h5(x)
x = h6(x)
x = h7(x)
x = h8(x)
outputs_reg = out_reg(x)
outputs_class = out_class(x)

model = keras.Model(inputs=inputs, outputs=[
                    outputs_reg, outputs_class], name='garment_employee_model')
model.summary()
# save model structure in images
dot_img_file = 'public/model.png'
plot_model(model, to_file=dot_img_file, show_shapes=True)

# Compile model
model.compile(optimizer='adam', loss=[
              'mse', 'sparse_categorical_crossentropy'], metrics=['mae', 'accuracy'])

# Model training
history = model.fit(X_train, [y_train, y_train_class], validation_data=(X_test, [y_test, y_test_class]), batch_size=16,
                    epochs=50)

# Make predictions on the labels
y_pred_reg, y_pred_class = model.predict(X_test)

# evaluate accuracy for classification model
y_pred_class = np.argmax(y_pred_class, axis=1).astype('int')
acc = accuracy_score(y_test_class, y_pred_class)
print(f'Accuracy: {acc * 100}%')

# Evaluate Error for regression model
error = mean_absolute_error(y_test, y_pred_reg)
print('MAE: %.3f' % error)

# Visualize the plot of prediction vs label
plt.figure(figsize=(10,10))
plt.scatter(y_test, y_pred_reg, c='crimson')
plt.yscale('log')
plt.xscale('log')

p1 = max(max(y_pred_reg), max(y_test))
p2 = min(min(y_pred_reg), min(y_test))
plt.plot([p1, p2], [p1, p2], 'b-')
plt.xlabel('Labels', fontsize=15)
plt.ylabel('Predictions', fontsize=15)
plt.axis('equal')
plt.show()